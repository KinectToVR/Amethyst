// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Amethyst_API.proto

#include "pch.h"
#include "Amethyst_API.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

#define PROTOBUF_CONSTINIT

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ktvr {
PROTOBUF_CONSTEXPR K2Quaternion::K2Quaternion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.w_)*/1} {}
struct K2QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR K2QuaternionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~K2QuaternionDefaultTypeInternal() {}
  union {
    K2Quaternion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 K2QuaternionDefaultTypeInternal _K2Quaternion_default_instance_;
PROTOBUF_CONSTEXPR K2Vector3::K2Vector3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0} {}
struct K2Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR K2Vector3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~K2Vector3DefaultTypeInternal() {}
  union {
    K2Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 K2Vector3DefaultTypeInternal _K2Vector3_default_instance_;
PROTOBUF_CONSTEXPR K2TrackerPhysics::K2TrackerPhysics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.acceleration_)*/nullptr
  , /*decltype(_impl_.angularvelocity_)*/nullptr
  , /*decltype(_impl_.angularacceleration_)*/nullptr} {}
struct K2TrackerPhysicsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR K2TrackerPhysicsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~K2TrackerPhysicsDefaultTypeInternal() {}
  union {
    K2TrackerPhysics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 K2TrackerPhysicsDefaultTypeInternal _K2TrackerPhysics_default_instance_;
PROTOBUF_CONSTEXPR K2TrackerPose::K2TrackerPose(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.orientation_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.physics_)*/nullptr
  , /*decltype(_impl_.posetimestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.previousposetimestamp_)*/uint64_t{0u}} {}
struct K2TrackerPoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR K2TrackerPoseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~K2TrackerPoseDefaultTypeInternal() {}
  union {
    K2TrackerPose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 K2TrackerPoseDefaultTypeInternal _K2TrackerPose_default_instance_;
PROTOBUF_CONSTEXPR K2StatusPair::K2StatusPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tracker_)*/0
  , /*decltype(_impl_.status_)*/false} {}
struct K2StatusPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR K2StatusPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~K2StatusPairDefaultTypeInternal() {}
  union {
    K2StatusPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 K2StatusPairDefaultTypeInternal _K2StatusPair_default_instance_;
PROTOBUF_CONSTEXPR K2TrackerData::K2TrackerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.serial_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_)*/0
  , /*decltype(_impl_.isactive_)*/false} {}
struct K2TrackerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR K2TrackerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~K2TrackerDataDefaultTypeInternal() {}
  union {
    K2TrackerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 K2TrackerDataDefaultTypeInternal _K2TrackerData_default_instance_;
PROTOBUF_CONSTEXPR K2TrackerBase::K2TrackerBase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.tracker_)*/0} {}
struct K2TrackerBaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR K2TrackerBaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~K2TrackerBaseDefaultTypeInternal() {}
  union {
    K2TrackerBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 K2TrackerBaseDefaultTypeInternal _K2TrackerBase_default_instance_;
PROTOBUF_CONSTEXPR K2Message::K2Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trackerbasevector_)*/{}
  , /*decltype(_impl_.trackerstatusesvector_)*/{}
  , /*decltype(_impl_.message_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.messagetimestamp_)*/int64_t{0}
  , /*decltype(_impl_.messagemanualtimestamp_)*/int64_t{0}
  , /*decltype(_impl_.messagetype_)*/0
  , /*decltype(_impl_.tracker_)*/0
  , /*decltype(_impl_.state_)*/false
  , /*decltype(_impl_.want_reply_)*/true} {}
struct K2MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR K2MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~K2MessageDefaultTypeInternal() {}
  union {
    K2Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 K2MessageDefaultTypeInternal _K2Message_default_instance_;
PROTOBUF_CONSTEXPR K2ResponseMessage::K2ResponseMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messagetimestamp_)*/int64_t{0}
  , /*decltype(_impl_.messagetype_)*/0
  , /*decltype(_impl_.tracker_)*/0
  , /*decltype(_impl_.messagemanualtimestamp_)*/int64_t{0}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.result_)*/1} {}
struct K2ResponseMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR K2ResponseMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~K2ResponseMessageDefaultTypeInternal() {}
  union {
    K2ResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 K2ResponseMessageDefaultTypeInternal _K2ResponseMessage_default_instance_;
}  // namespace ktvr
static ::_pb::Metadata file_level_metadata_Amethyst_5fAPI_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Amethyst_5fAPI_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Amethyst_5fAPI_2eproto = nullptr;

const uint32_t TableStruct_Amethyst_5fAPI_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Quaternion, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Quaternion, _impl_.w_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Quaternion, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Quaternion, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Quaternion, _impl_.z_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Vector3, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Vector3, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Vector3, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Vector3, _impl_.z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerPhysics, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerPhysics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerPhysics, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerPhysics, _impl_.acceleration_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerPhysics, _impl_.angularvelocity_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerPhysics, _impl_.angularacceleration_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerPose, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerPose, _impl_.orientation_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerPose, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerPose, _impl_.physics_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerPose, _impl_.posetimestamp_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerPose, _impl_.previousposetimestamp_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ktvr::K2StatusPair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2StatusPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ktvr::K2StatusPair, _impl_.tracker_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2StatusPair, _impl_.status_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerData, _impl_.serial_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerData, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerData, _impl_.isactive_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerBase, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerBase, _impl_.pose_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerBase, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2TrackerBase, _impl_.tracker_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Message, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Message, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Message, _impl_.messagetimestamp_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Message, _impl_.messagemanualtimestamp_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Message, _impl_.trackerbasevector_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Message, _impl_.trackerstatusesvector_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Message, _impl_.tracker_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Message, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Message, _impl_.want_reply_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2Message, _impl_.message_string_),
  3,
  1,
  2,
  ~0u,
  ~0u,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::ktvr::K2ResponseMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2ResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ktvr::K2ResponseMessage, _impl_.messagetype_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2ResponseMessage, _impl_.messagetimestamp_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2ResponseMessage, _impl_.messagemanualtimestamp_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2ResponseMessage, _impl_.tracker_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2ResponseMessage, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::ktvr::K2ResponseMessage, _impl_.success_),
  1,
  0,
  3,
  2,
  5,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::ktvr::K2Quaternion)},
  { 14, 23, -1, sizeof(::ktvr::K2Vector3)},
  { 26, 36, -1, sizeof(::ktvr::K2TrackerPhysics)},
  { 40, 51, -1, sizeof(::ktvr::K2TrackerPose)},
  { 56, 64, -1, sizeof(::ktvr::K2StatusPair)},
  { 66, 75, -1, sizeof(::ktvr::K2TrackerData)},
  { 78, 87, -1, sizeof(::ktvr::K2TrackerBase)},
  { 90, 105, -1, sizeof(::ktvr::K2Message)},
  { 114, 126, -1, sizeof(::ktvr::K2ResponseMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ktvr::_K2Quaternion_default_instance_._instance,
  &::ktvr::_K2Vector3_default_instance_._instance,
  &::ktvr::_K2TrackerPhysics_default_instance_._instance,
  &::ktvr::_K2TrackerPose_default_instance_._instance,
  &::ktvr::_K2StatusPair_default_instance_._instance,
  &::ktvr::_K2TrackerData_default_instance_._instance,
  &::ktvr::_K2TrackerBase_default_instance_._instance,
  &::ktvr::_K2Message_default_instance_._instance,
  &::ktvr::_K2ResponseMessage_default_instance_._instance,
};

const char descriptor_table_protodef_Amethyst_5fAPI_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022Amethyst_API.proto\022\004ktvr\"F\n\014K2Quaterni"
  "on\022\014\n\001w\030\001 \002(\001:\0011\022\014\n\001x\030\002 \002(\001:\0010\022\014\n\001y\030\003 \002("
  "\001:\0010\022\014\n\001z\030\004 \002(\001:\0010\"5\n\tK2Vector3\022\014\n\001x\030\001 \002"
  "(\001:\0010\022\014\n\001y\030\002 \002(\001:\0010\022\014\n\001z\030\003 \002(\001:\0010\"\264\001\n\020K2"
  "TrackerPhysics\022!\n\010velocity\030\001 \002(\0132\017.ktvr."
  "K2Vector3\022%\n\014acceleration\030\002 \002(\0132\017.ktvr.K"
  "2Vector3\022(\n\017angularVelocity\030\003 \002(\0132\017.ktvr"
  ".K2Vector3\022,\n\023angularAcceleration\030\004 \002(\0132"
  "\017.ktvr.K2Vector3\"\272\001\n\rK2TrackerPose\022\'\n\013or"
  "ientation\030\001 \002(\0132\022.ktvr.K2Quaternion\022!\n\010p"
  "osition\030\002 \002(\0132\017.ktvr.K2Vector3\022\'\n\007physic"
  "s\030\003 \001(\0132\026.ktvr.K2TrackerPhysics\022\025\n\rposeT"
  "imestamp\030\004 \002(\004\022\035\n\025previousPoseTimestamp\030"
  "\005 \002(\004\"J\n\014K2StatusPair\022#\n\007tracker\030\001 \002(\0162\022"
  ".ktvr.ITrackerType\022\025\n\006status\030\002 \002(\010:\005fals"
  "e\"j\n\rK2TrackerData\022\016\n\006serial\030\001 \002(\t\0220\n\004ro"
  "le\030\002 \002(\0162\022.ktvr.ITrackerType:\016Tracker_Ha"
  "nded\022\027\n\010isActive\030\003 \002(\010:\005false\"\212\001\n\rK2Trac"
  "kerBase\022!\n\004pose\030\001 \002(\0132\023.ktvr.K2TrackerPo"
  "se\022!\n\004data\030\002 \002(\0132\023.ktvr.K2TrackerData\0223\n"
  "\007tracker\030\003 \002(\0162\022.ktvr.ITrackerType:\016Trac"
  "ker_Handed\"\350\002\n\tK2Message\022;\n\013messageType\030"
  "\001 \002(\0162\023.ktvr.K2MessageType:\021K2Message_In"
  "valid\022\033\n\020messageTimestamp\030\002 \002(\003:\0010\022!\n\026me"
  "ssageManualTimestamp\030\003 \002(\003:\0010\022.\n\021tracker"
  "BaseVector\030\004 \003(\0132\023.ktvr.K2TrackerBase\0221\n"
  "\025trackerStatusesVector\030\005 \003(\0132\022.ktvr.K2St"
  "atusPair\0223\n\007tracker\030\006 \002(\0162\022.ktvr.ITracke"
  "rType:\016Tracker_Handed\022\024\n\005state\030\007 \002(\010:\005fa"
  "lse\022\030\n\nwant_reply\030\010 \002(\010:\004true\022\026\n\016message"
  "_string\030\t \002(\t\"\276\002\n\021K2ResponseMessage\022K\n\013m"
  "essageType\030\001 \002(\0162\033.ktvr.K2ResponseMessag"
  "eType:\031K2ResponseMessage_Invalid\022\033\n\020mess"
  "ageTimestamp\030\002 \002(\003:\0010\022!\n\026messageManualTi"
  "mestamp\030\003 \002(\003:\0010\0223\n\007tracker\030\004 \002(\0162\022.ktvr"
  ".ITrackerType:\016Tracker_Handed\022O\n\006result\030"
  "\005 \002(\0162\033.ktvr.K2ResponseMessageCode:\"K2Re"
  "sponseMessageCode_UnknownError\022\026\n\007succes"
  "s\030\006 \002(\010:\005false*\260\002\n\014ITrackerType\022\022\n\016Track"
  "er_Handed\020\000\022\024\n\020Tracker_LeftFoot\020\001\022\025\n\021Tra"
  "cker_RightFoot\020\002\022\030\n\024Tracker_LeftShoulder"
  "\020\003\022\031\n\025Tracker_RightShoulder\020\004\022\025\n\021Tracker"
  "_LeftElbow\020\005\022\026\n\022Tracker_RightElbow\020\006\022\024\n\020"
  "Tracker_LeftKnee\020\007\022\025\n\021Tracker_RightKnee\020"
  "\010\022\021\n\rTracker_Waist\020\t\022\021\n\rTracker_Chest\020\n\022"
  "\022\n\016Tracker_Camera\020\013\022\024\n\020Tracker_Keyboard\020"
  "\014*\235\002\n\rK2MessageType\022\025\n\021K2Message_Invalid"
  "\020\000\022\035\n\031K2Message_SetTrackerState\020\001\022#\n\037K2M"
  "essage_SetTrackerStateVector\020\002\022\031\n\025K2Mess"
  "age_SetStateAll\020\003\022\037\n\033K2Message_UpdateTra"
  "ckerPose\020\004\022%\n!K2Message_UpdateTrackerPos"
  "eVector\020\005\022\034\n\030K2Message_RefreshTracker\020\006\022"
  "\034\n\030K2Message_RequestRestart\020\007\022\022\n\016K2Messa"
  "ge_Ping\020\010*\220\001\n\025K2ResponseMessageType\022\035\n\031K"
  "2ResponseMessage_Invalid\020\000\022\032\n\026K2Response"
  "Message_Role\020\001\022\035\n\031K2ResponseMessage_Succ"
  "ess\020\002\022\035\n\031K2ResponseMessage_Tracker\020\003*\351\002\n"
  "\025K2ResponseMessageCode\022#\n\037K2ResponseMess"
  "ageCode_Exception\020\000\022&\n\"K2ResponseMessage"
  "Code_UnknownError\020\001\022!\n\035K2ResponseMessage"
  "Code_Invalid\020\002\022\034\n\030K2ResponseMessageCode_"
  "OK\020\003\022%\n!K2ResponseMessageCode_SpawnFaile"
  "d\020\004\022(\n$K2ResponseMessageCode_AlreadyPres"
  "ent\020\005\022$\n K2ResponseMessageCode_BadReques"
  "t\020\006\022&\n\"K2ResponseMessageCode_ParsingErro"
  "r\020\007\022#\n\037K2ResponseMessageCode_BadSerial\020\010"
  ;
static ::_pbi::once_flag descriptor_table_Amethyst_5fAPI_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Amethyst_5fAPI_2eproto = {
    false, false, 2640, descriptor_table_protodef_Amethyst_5fAPI_2eproto,
    "Amethyst_API.proto",
    &descriptor_table_Amethyst_5fAPI_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_Amethyst_5fAPI_2eproto::offsets,
    file_level_metadata_Amethyst_5fAPI_2eproto, file_level_enum_descriptors_Amethyst_5fAPI_2eproto,
    file_level_service_descriptors_Amethyst_5fAPI_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Amethyst_5fAPI_2eproto_getter() {
  return &descriptor_table_Amethyst_5fAPI_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Amethyst_5fAPI_2eproto(&descriptor_table_Amethyst_5fAPI_2eproto);
namespace ktvr {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITrackerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Amethyst_5fAPI_2eproto);
  return file_level_enum_descriptors_Amethyst_5fAPI_2eproto[0];
}
bool ITrackerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* K2MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Amethyst_5fAPI_2eproto);
  return file_level_enum_descriptors_Amethyst_5fAPI_2eproto[1];
}
bool K2MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* K2ResponseMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Amethyst_5fAPI_2eproto);
  return file_level_enum_descriptors_Amethyst_5fAPI_2eproto[2];
}
bool K2ResponseMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* K2ResponseMessageCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Amethyst_5fAPI_2eproto);
  return file_level_enum_descriptors_Amethyst_5fAPI_2eproto[3];
}
bool K2ResponseMessageCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class K2Quaternion::_Internal {
 public:
  using HasBits = decltype(std::declval<K2Quaternion>()._impl_._has_bits_);
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

K2Quaternion::K2Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ktvr.K2Quaternion)
}
K2Quaternion::K2Quaternion(const K2Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  K2Quaternion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.w_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.w_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  // @@protoc_insertion_point(copy_constructor:ktvr.K2Quaternion)
}

inline void K2Quaternion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.w_){1}
  };
}

K2Quaternion::~K2Quaternion() {
  // @@protoc_insertion_point(destructor:ktvr.K2Quaternion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void K2Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void K2Quaternion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void K2Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:ktvr.K2Quaternion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
    _impl_.w_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* K2Quaternion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double w = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_w(&has_bits);
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double x = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double y = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double z = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* K2Quaternion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ktvr.K2Quaternion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double w = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_w(), target);
  }

  // required double x = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // required double y = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // required double z = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ktvr.K2Quaternion)
  return target;
}

size_t K2Quaternion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ktvr.K2Quaternion)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required double x = 2 [default = 0];
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 3 [default = 0];
    total_size += 1 + 8;
  }

  if (_internal_has_z()) {
    // required double z = 4 [default = 0];
    total_size += 1 + 8;
  }

  if (_internal_has_w()) {
    // required double w = 1 [default = 1];
    total_size += 1 + 8;
  }

  return total_size;
}
size_t K2Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ktvr.K2Quaternion)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double x = 2 [default = 0];
    total_size += 1 + 8;

    // required double y = 3 [default = 0];
    total_size += 1 + 8;

    // required double z = 4 [default = 0];
    total_size += 1 + 8;

    // required double w = 1 [default = 1];
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData K2Quaternion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    K2Quaternion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*K2Quaternion::GetClassData() const { return &_class_data_; }


void K2Quaternion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<K2Quaternion*>(&to_msg);
  auto& from = static_cast<const K2Quaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ktvr.K2Quaternion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.w_ = from._impl_.w_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void K2Quaternion::CopyFrom(const K2Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ktvr.K2Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool K2Quaternion::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void K2Quaternion::InternalSwap(K2Quaternion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(K2Quaternion, _impl_.z_)
      + sizeof(K2Quaternion::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(K2Quaternion, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
  swap(_impl_.w_, other->_impl_.w_);
}

::PROTOBUF_NAMESPACE_ID::Metadata K2Quaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Amethyst_5fAPI_2eproto_getter, &descriptor_table_Amethyst_5fAPI_2eproto_once,
      file_level_metadata_Amethyst_5fAPI_2eproto[0]);
}

// ===================================================================

class K2Vector3::_Internal {
 public:
  using HasBits = decltype(std::declval<K2Vector3>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

K2Vector3::K2Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ktvr.K2Vector3)
}
K2Vector3::K2Vector3(const K2Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  K2Vector3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:ktvr.K2Vector3)
}

inline void K2Vector3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
  };
}

K2Vector3::~K2Vector3() {
  // @@protoc_insertion_point(destructor:ktvr.K2Vector3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void K2Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void K2Vector3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void K2Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:ktvr.K2Vector3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* K2Vector3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double x = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double y = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double z = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* K2Vector3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ktvr.K2Vector3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // required double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // required double z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ktvr.K2Vector3)
  return target;
}

size_t K2Vector3::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ktvr.K2Vector3)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required double x = 1 [default = 0];
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 2 [default = 0];
    total_size += 1 + 8;
  }

  if (_internal_has_z()) {
    // required double z = 3 [default = 0];
    total_size += 1 + 8;
  }

  return total_size;
}
size_t K2Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ktvr.K2Vector3)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double x = 1 [default = 0];
    total_size += 1 + 8;

    // required double y = 2 [default = 0];
    total_size += 1 + 8;

    // required double z = 3 [default = 0];
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData K2Vector3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    K2Vector3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*K2Vector3::GetClassData() const { return &_class_data_; }


void K2Vector3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<K2Vector3*>(&to_msg);
  auto& from = static_cast<const K2Vector3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ktvr.K2Vector3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void K2Vector3::CopyFrom(const K2Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ktvr.K2Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool K2Vector3::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void K2Vector3::InternalSwap(K2Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(K2Vector3, _impl_.z_)
      + sizeof(K2Vector3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(K2Vector3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata K2Vector3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Amethyst_5fAPI_2eproto_getter, &descriptor_table_Amethyst_5fAPI_2eproto_once,
      file_level_metadata_Amethyst_5fAPI_2eproto[1]);
}

// ===================================================================

class K2TrackerPhysics::_Internal {
 public:
  using HasBits = decltype(std::declval<K2TrackerPhysics>()._impl_._has_bits_);
  static const ::ktvr::K2Vector3& velocity(const K2TrackerPhysics* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ktvr::K2Vector3& acceleration(const K2TrackerPhysics* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ktvr::K2Vector3& angularvelocity(const K2TrackerPhysics* msg);
  static void set_has_angularvelocity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ktvr::K2Vector3& angularacceleration(const K2TrackerPhysics* msg);
  static void set_has_angularacceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::ktvr::K2Vector3&
K2TrackerPhysics::_Internal::velocity(const K2TrackerPhysics* msg) {
  return *msg->_impl_.velocity_;
}
const ::ktvr::K2Vector3&
K2TrackerPhysics::_Internal::acceleration(const K2TrackerPhysics* msg) {
  return *msg->_impl_.acceleration_;
}
const ::ktvr::K2Vector3&
K2TrackerPhysics::_Internal::angularvelocity(const K2TrackerPhysics* msg) {
  return *msg->_impl_.angularvelocity_;
}
const ::ktvr::K2Vector3&
K2TrackerPhysics::_Internal::angularacceleration(const K2TrackerPhysics* msg) {
  return *msg->_impl_.angularacceleration_;
}
K2TrackerPhysics::K2TrackerPhysics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ktvr.K2TrackerPhysics)
}
K2TrackerPhysics::K2TrackerPhysics(const K2TrackerPhysics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  K2TrackerPhysics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.angularvelocity_){nullptr}
    , decltype(_impl_.angularacceleration_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_velocity()) {
    _this->_impl_.velocity_ = new ::ktvr::K2Vector3(*from._impl_.velocity_);
  }
  if (from._internal_has_acceleration()) {
    _this->_impl_.acceleration_ = new ::ktvr::K2Vector3(*from._impl_.acceleration_);
  }
  if (from._internal_has_angularvelocity()) {
    _this->_impl_.angularvelocity_ = new ::ktvr::K2Vector3(*from._impl_.angularvelocity_);
  }
  if (from._internal_has_angularacceleration()) {
    _this->_impl_.angularacceleration_ = new ::ktvr::K2Vector3(*from._impl_.angularacceleration_);
  }
  // @@protoc_insertion_point(copy_constructor:ktvr.K2TrackerPhysics)
}

inline void K2TrackerPhysics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.angularvelocity_){nullptr}
    , decltype(_impl_.angularacceleration_){nullptr}
  };
}

K2TrackerPhysics::~K2TrackerPhysics() {
  // @@protoc_insertion_point(destructor:ktvr.K2TrackerPhysics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void K2TrackerPhysics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.velocity_;
  if (this != internal_default_instance()) delete _impl_.acceleration_;
  if (this != internal_default_instance()) delete _impl_.angularvelocity_;
  if (this != internal_default_instance()) delete _impl_.angularacceleration_;
}

void K2TrackerPhysics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void K2TrackerPhysics::Clear() {
// @@protoc_insertion_point(message_clear_start:ktvr.K2TrackerPhysics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.angularvelocity_ != nullptr);
      _impl_.angularvelocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.angularacceleration_ != nullptr);
      _impl_.angularacceleration_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* K2TrackerPhysics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .ktvr.K2Vector3 velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .ktvr.K2Vector3 acceleration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .ktvr.K2Vector3 angularVelocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_angularvelocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .ktvr.K2Vector3 angularAcceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_angularacceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* K2TrackerPhysics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ktvr.K2TrackerPhysics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .ktvr.K2Vector3 velocity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // required .ktvr.K2Vector3 acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // required .ktvr.K2Vector3 angularVelocity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::angularvelocity(this),
        _Internal::angularvelocity(this).GetCachedSize(), target, stream);
  }

  // required .ktvr.K2Vector3 angularAcceleration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::angularacceleration(this),
        _Internal::angularacceleration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ktvr.K2TrackerPhysics)
  return target;
}

size_t K2TrackerPhysics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ktvr.K2TrackerPhysics)
  size_t total_size = 0;

  if (_internal_has_velocity()) {
    // required .ktvr.K2Vector3 velocity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velocity_);
  }

  if (_internal_has_acceleration()) {
    // required .ktvr.K2Vector3 acceleration = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.acceleration_);
  }

  if (_internal_has_angularvelocity()) {
    // required .ktvr.K2Vector3 angularVelocity = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angularvelocity_);
  }

  if (_internal_has_angularacceleration()) {
    // required .ktvr.K2Vector3 angularAcceleration = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angularacceleration_);
  }

  return total_size;
}
size_t K2TrackerPhysics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ktvr.K2TrackerPhysics)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .ktvr.K2Vector3 velocity = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velocity_);

    // required .ktvr.K2Vector3 acceleration = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.acceleration_);

    // required .ktvr.K2Vector3 angularVelocity = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angularvelocity_);

    // required .ktvr.K2Vector3 angularAcceleration = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angularacceleration_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData K2TrackerPhysics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    K2TrackerPhysics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*K2TrackerPhysics::GetClassData() const { return &_class_data_; }


void K2TrackerPhysics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<K2TrackerPhysics*>(&to_msg);
  auto& from = static_cast<const K2TrackerPhysics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ktvr.K2TrackerPhysics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_velocity()->::ktvr::K2Vector3::MergeFrom(
          from._internal_velocity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_acceleration()->::ktvr::K2Vector3::MergeFrom(
          from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_angularvelocity()->::ktvr::K2Vector3::MergeFrom(
          from._internal_angularvelocity());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_angularacceleration()->::ktvr::K2Vector3::MergeFrom(
          from._internal_angularacceleration());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void K2TrackerPhysics::CopyFrom(const K2TrackerPhysics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ktvr.K2TrackerPhysics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool K2TrackerPhysics::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_velocity()) {
    if (!_impl_.velocity_->IsInitialized()) return false;
  }
  if (_internal_has_acceleration()) {
    if (!_impl_.acceleration_->IsInitialized()) return false;
  }
  if (_internal_has_angularvelocity()) {
    if (!_impl_.angularvelocity_->IsInitialized()) return false;
  }
  if (_internal_has_angularacceleration()) {
    if (!_impl_.angularacceleration_->IsInitialized()) return false;
  }
  return true;
}

void K2TrackerPhysics::InternalSwap(K2TrackerPhysics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(K2TrackerPhysics, _impl_.angularacceleration_)
      + sizeof(K2TrackerPhysics::_impl_.angularacceleration_)
      - PROTOBUF_FIELD_OFFSET(K2TrackerPhysics, _impl_.velocity_)>(
          reinterpret_cast<char*>(&_impl_.velocity_),
          reinterpret_cast<char*>(&other->_impl_.velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata K2TrackerPhysics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Amethyst_5fAPI_2eproto_getter, &descriptor_table_Amethyst_5fAPI_2eproto_once,
      file_level_metadata_Amethyst_5fAPI_2eproto[2]);
}

// ===================================================================

class K2TrackerPose::_Internal {
 public:
  using HasBits = decltype(std::declval<K2TrackerPose>()._impl_._has_bits_);
  static const ::ktvr::K2Quaternion& orientation(const K2TrackerPose* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ktvr::K2Vector3& position(const K2TrackerPose* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ktvr::K2TrackerPhysics& physics(const K2TrackerPose* msg);
  static void set_has_physics(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_posetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_previousposetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001b) ^ 0x0000001b) != 0;
  }
};

const ::ktvr::K2Quaternion&
K2TrackerPose::_Internal::orientation(const K2TrackerPose* msg) {
  return *msg->_impl_.orientation_;
}
const ::ktvr::K2Vector3&
K2TrackerPose::_Internal::position(const K2TrackerPose* msg) {
  return *msg->_impl_.position_;
}
const ::ktvr::K2TrackerPhysics&
K2TrackerPose::_Internal::physics(const K2TrackerPose* msg) {
  return *msg->_impl_.physics_;
}
K2TrackerPose::K2TrackerPose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ktvr.K2TrackerPose)
}
K2TrackerPose::K2TrackerPose(const K2TrackerPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  K2TrackerPose* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orientation_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.physics_){nullptr}
    , decltype(_impl_.posetimestamp_){}
    , decltype(_impl_.previousposetimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_orientation()) {
    _this->_impl_.orientation_ = new ::ktvr::K2Quaternion(*from._impl_.orientation_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::ktvr::K2Vector3(*from._impl_.position_);
  }
  if (from._internal_has_physics()) {
    _this->_impl_.physics_ = new ::ktvr::K2TrackerPhysics(*from._impl_.physics_);
  }
  ::memcpy(&_impl_.posetimestamp_, &from._impl_.posetimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.previousposetimestamp_) -
    reinterpret_cast<char*>(&_impl_.posetimestamp_)) + sizeof(_impl_.previousposetimestamp_));
  // @@protoc_insertion_point(copy_constructor:ktvr.K2TrackerPose)
}

inline void K2TrackerPose::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orientation_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.physics_){nullptr}
    , decltype(_impl_.posetimestamp_){uint64_t{0u}}
    , decltype(_impl_.previousposetimestamp_){uint64_t{0u}}
  };
}

K2TrackerPose::~K2TrackerPose() {
  // @@protoc_insertion_point(destructor:ktvr.K2TrackerPose)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void K2TrackerPose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.orientation_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.physics_;
}

void K2TrackerPose::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void K2TrackerPose::Clear() {
// @@protoc_insertion_point(message_clear_start:ktvr.K2TrackerPose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.orientation_ != nullptr);
      _impl_.orientation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.physics_ != nullptr);
      _impl_.physics_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.posetimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.previousposetimestamp_) -
        reinterpret_cast<char*>(&_impl_.posetimestamp_)) + sizeof(_impl_.previousposetimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* K2TrackerPose::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .ktvr.K2Quaternion orientation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .ktvr.K2Vector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ktvr.K2TrackerPhysics physics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_physics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 poseTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_posetimestamp(&has_bits);
          _impl_.posetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 previousPoseTimestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_previousposetimestamp(&has_bits);
          _impl_.previousposetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* K2TrackerPose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ktvr.K2TrackerPose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .ktvr.K2Quaternion orientation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::orientation(this),
        _Internal::orientation(this).GetCachedSize(), target, stream);
  }

  // required .ktvr.K2Vector3 position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .ktvr.K2TrackerPhysics physics = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::physics(this),
        _Internal::physics(this).GetCachedSize(), target, stream);
  }

  // required uint64 poseTimestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_posetimestamp(), target);
  }

  // required uint64 previousPoseTimestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_previousposetimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ktvr.K2TrackerPose)
  return target;
}

size_t K2TrackerPose::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ktvr.K2TrackerPose)
  size_t total_size = 0;

  if (_internal_has_orientation()) {
    // required .ktvr.K2Quaternion orientation = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.orientation_);
  }

  if (_internal_has_position()) {
    // required .ktvr.K2Vector3 position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  if (_internal_has_posetimestamp()) {
    // required uint64 poseTimestamp = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_posetimestamp());
  }

  if (_internal_has_previousposetimestamp()) {
    // required uint64 previousPoseTimestamp = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_previousposetimestamp());
  }

  return total_size;
}
size_t K2TrackerPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ktvr.K2TrackerPose)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required .ktvr.K2Quaternion orientation = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.orientation_);

    // required .ktvr.K2Vector3 position = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);

    // required uint64 poseTimestamp = 4;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_posetimestamp());

    // required uint64 previousPoseTimestamp = 5;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_previousposetimestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ktvr.K2TrackerPhysics physics = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.physics_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData K2TrackerPose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    K2TrackerPose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*K2TrackerPose::GetClassData() const { return &_class_data_; }


void K2TrackerPose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<K2TrackerPose*>(&to_msg);
  auto& from = static_cast<const K2TrackerPose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ktvr.K2TrackerPose)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_orientation()->::ktvr::K2Quaternion::MergeFrom(
          from._internal_orientation());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_position()->::ktvr::K2Vector3::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_physics()->::ktvr::K2TrackerPhysics::MergeFrom(
          from._internal_physics());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.posetimestamp_ = from._impl_.posetimestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.previousposetimestamp_ = from._impl_.previousposetimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void K2TrackerPose::CopyFrom(const K2TrackerPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ktvr.K2TrackerPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool K2TrackerPose::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_orientation()) {
    if (!_impl_.orientation_->IsInitialized()) return false;
  }
  if (_internal_has_position()) {
    if (!_impl_.position_->IsInitialized()) return false;
  }
  if (_internal_has_physics()) {
    if (!_impl_.physics_->IsInitialized()) return false;
  }
  return true;
}

void K2TrackerPose::InternalSwap(K2TrackerPose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(K2TrackerPose, _impl_.previousposetimestamp_)
      + sizeof(K2TrackerPose::_impl_.previousposetimestamp_)
      - PROTOBUF_FIELD_OFFSET(K2TrackerPose, _impl_.orientation_)>(
          reinterpret_cast<char*>(&_impl_.orientation_),
          reinterpret_cast<char*>(&other->_impl_.orientation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata K2TrackerPose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Amethyst_5fAPI_2eproto_getter, &descriptor_table_Amethyst_5fAPI_2eproto_once,
      file_level_metadata_Amethyst_5fAPI_2eproto[3]);
}

// ===================================================================

class K2StatusPair::_Internal {
 public:
  using HasBits = decltype(std::declval<K2StatusPair>()._impl_._has_bits_);
  static void set_has_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

K2StatusPair::K2StatusPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ktvr.K2StatusPair)
}
K2StatusPair::K2StatusPair(const K2StatusPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  K2StatusPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tracker_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tracker_, &from._impl_.tracker_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.tracker_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:ktvr.K2StatusPair)
}

inline void K2StatusPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tracker_){0}
    , decltype(_impl_.status_){false}
  };
}

K2StatusPair::~K2StatusPair() {
  // @@protoc_insertion_point(destructor:ktvr.K2StatusPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void K2StatusPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void K2StatusPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void K2StatusPair::Clear() {
// @@protoc_insertion_point(message_clear_start:ktvr.K2StatusPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.tracker_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.tracker_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* K2StatusPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .ktvr.ITrackerType tracker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ktvr::ITrackerType_IsValid(val))) {
            _internal_set_tracker(static_cast<::ktvr::ITrackerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bool status = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* K2StatusPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ktvr.K2StatusPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .ktvr.ITrackerType tracker = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_tracker(), target);
  }

  // required bool status = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ktvr.K2StatusPair)
  return target;
}

size_t K2StatusPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ktvr.K2StatusPair)
  size_t total_size = 0;

  if (_internal_has_tracker()) {
    // required .ktvr.ITrackerType tracker = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tracker());
  }

  if (_internal_has_status()) {
    // required bool status = 2 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t K2StatusPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ktvr.K2StatusPair)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ktvr.ITrackerType tracker = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tracker());

    // required bool status = 2 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData K2StatusPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    K2StatusPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*K2StatusPair::GetClassData() const { return &_class_data_; }


void K2StatusPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<K2StatusPair*>(&to_msg);
  auto& from = static_cast<const K2StatusPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ktvr.K2StatusPair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tracker_ = from._impl_.tracker_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void K2StatusPair::CopyFrom(const K2StatusPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ktvr.K2StatusPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool K2StatusPair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void K2StatusPair::InternalSwap(K2StatusPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(K2StatusPair, _impl_.status_)
      + sizeof(K2StatusPair::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(K2StatusPair, _impl_.tracker_)>(
          reinterpret_cast<char*>(&_impl_.tracker_),
          reinterpret_cast<char*>(&other->_impl_.tracker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata K2StatusPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Amethyst_5fAPI_2eproto_getter, &descriptor_table_Amethyst_5fAPI_2eproto_once,
      file_level_metadata_Amethyst_5fAPI_2eproto[4]);
}

// ===================================================================

class K2TrackerData::_Internal {
 public:
  using HasBits = decltype(std::declval<K2TrackerData>()._impl_._has_bits_);
  static void set_has_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isactive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

K2TrackerData::K2TrackerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ktvr.K2TrackerData)
}
K2TrackerData::K2TrackerData(const K2TrackerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  K2TrackerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serial_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.isactive_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serial_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serial()) {
    _this->_impl_.serial_.Set(from._internal_serial(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.role_, &from._impl_.role_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isactive_) -
    reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.isactive_));
  // @@protoc_insertion_point(copy_constructor:ktvr.K2TrackerData)
}

inline void K2TrackerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serial_){}
    , decltype(_impl_.role_){0}
    , decltype(_impl_.isactive_){false}
  };
  _impl_.serial_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

K2TrackerData::~K2TrackerData() {
  // @@protoc_insertion_point(destructor:ktvr.K2TrackerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void K2TrackerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serial_.Destroy();
}

void K2TrackerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void K2TrackerData::Clear() {
// @@protoc_insertion_point(message_clear_start:ktvr.K2TrackerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.serial_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.role_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.isactive_) -
        reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.isactive_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* K2TrackerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serial();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ktvr.K2TrackerData.serial");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .ktvr.ITrackerType role = 2 [default = Tracker_Handed];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ktvr::ITrackerType_IsValid(val))) {
            _internal_set_role(static_cast<::ktvr::ITrackerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bool isActive = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_isactive(&has_bits);
          _impl_.isactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* K2TrackerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ktvr.K2TrackerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string serial = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial().data(), static_cast<int>(this->_internal_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ktvr.K2TrackerData.serial");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial(), target);
  }

  // required .ktvr.ITrackerType role = 2 [default = Tracker_Handed];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_role(), target);
  }

  // required bool isActive = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isactive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ktvr.K2TrackerData)
  return target;
}

size_t K2TrackerData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ktvr.K2TrackerData)
  size_t total_size = 0;

  if (_internal_has_serial()) {
    // required string serial = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial());
  }

  if (_internal_has_role()) {
    // required .ktvr.ITrackerType role = 2 [default = Tracker_Handed];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_role());
  }

  if (_internal_has_isactive()) {
    // required bool isActive = 3 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t K2TrackerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ktvr.K2TrackerData)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string serial = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial());

    // required .ktvr.ITrackerType role = 2 [default = Tracker_Handed];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_role());

    // required bool isActive = 3 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData K2TrackerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    K2TrackerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*K2TrackerData::GetClassData() const { return &_class_data_; }


void K2TrackerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<K2TrackerData*>(&to_msg);
  auto& from = static_cast<const K2TrackerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ktvr.K2TrackerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_serial(from._internal_serial());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.role_ = from._impl_.role_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.isactive_ = from._impl_.isactive_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void K2TrackerData::CopyFrom(const K2TrackerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ktvr.K2TrackerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool K2TrackerData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void K2TrackerData::InternalSwap(K2TrackerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serial_, lhs_arena,
      &other->_impl_.serial_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(K2TrackerData, _impl_.isactive_)
      + sizeof(K2TrackerData::_impl_.isactive_)
      - PROTOBUF_FIELD_OFFSET(K2TrackerData, _impl_.role_)>(
          reinterpret_cast<char*>(&_impl_.role_),
          reinterpret_cast<char*>(&other->_impl_.role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata K2TrackerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Amethyst_5fAPI_2eproto_getter, &descriptor_table_Amethyst_5fAPI_2eproto_once,
      file_level_metadata_Amethyst_5fAPI_2eproto[5]);
}

// ===================================================================

class K2TrackerBase::_Internal {
 public:
  using HasBits = decltype(std::declval<K2TrackerBase>()._impl_._has_bits_);
  static const ::ktvr::K2TrackerPose& pose(const K2TrackerBase* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ktvr::K2TrackerData& data(const K2TrackerBase* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::ktvr::K2TrackerPose&
K2TrackerBase::_Internal::pose(const K2TrackerBase* msg) {
  return *msg->_impl_.pose_;
}
const ::ktvr::K2TrackerData&
K2TrackerBase::_Internal::data(const K2TrackerBase* msg) {
  return *msg->_impl_.data_;
}
K2TrackerBase::K2TrackerBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ktvr.K2TrackerBase)
}
K2TrackerBase::K2TrackerBase(const K2TrackerBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  K2TrackerBase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.tracker_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::ktvr::K2TrackerPose(*from._impl_.pose_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::ktvr::K2TrackerData(*from._impl_.data_);
  }
  _this->_impl_.tracker_ = from._impl_.tracker_;
  // @@protoc_insertion_point(copy_constructor:ktvr.K2TrackerBase)
}

inline void K2TrackerBase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.tracker_){0}
  };
}

K2TrackerBase::~K2TrackerBase() {
  // @@protoc_insertion_point(destructor:ktvr.K2TrackerBase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void K2TrackerBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pose_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void K2TrackerBase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void K2TrackerBase::Clear() {
// @@protoc_insertion_point(message_clear_start:ktvr.K2TrackerBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
  }
  _impl_.tracker_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* K2TrackerBase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .ktvr.K2TrackerPose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .ktvr.K2TrackerData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .ktvr.ITrackerType tracker = 3 [default = Tracker_Handed];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ktvr::ITrackerType_IsValid(val))) {
            _internal_set_tracker(static_cast<::ktvr::ITrackerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* K2TrackerBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ktvr.K2TrackerBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .ktvr.K2TrackerPose pose = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // required .ktvr.K2TrackerData data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // required .ktvr.ITrackerType tracker = 3 [default = Tracker_Handed];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_tracker(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ktvr.K2TrackerBase)
  return target;
}

size_t K2TrackerBase::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ktvr.K2TrackerBase)
  size_t total_size = 0;

  if (_internal_has_pose()) {
    // required .ktvr.K2TrackerPose pose = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);
  }

  if (_internal_has_data()) {
    // required .ktvr.K2TrackerData data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  if (_internal_has_tracker()) {
    // required .ktvr.ITrackerType tracker = 3 [default = Tracker_Handed];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tracker());
  }

  return total_size;
}
size_t K2TrackerBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ktvr.K2TrackerBase)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ktvr.K2TrackerPose pose = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);

    // required .ktvr.K2TrackerData data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);

    // required .ktvr.ITrackerType tracker = 3 [default = Tracker_Handed];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tracker());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData K2TrackerBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    K2TrackerBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*K2TrackerBase::GetClassData() const { return &_class_data_; }


void K2TrackerBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<K2TrackerBase*>(&to_msg);
  auto& from = static_cast<const K2TrackerBase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ktvr.K2TrackerBase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pose()->::ktvr::K2TrackerPose::MergeFrom(
          from._internal_pose());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_data()->::ktvr::K2TrackerData::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tracker_ = from._impl_.tracker_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void K2TrackerBase::CopyFrom(const K2TrackerBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ktvr.K2TrackerBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool K2TrackerBase::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_pose()) {
    if (!_impl_.pose_->IsInitialized()) return false;
  }
  if (_internal_has_data()) {
    if (!_impl_.data_->IsInitialized()) return false;
  }
  return true;
}

void K2TrackerBase::InternalSwap(K2TrackerBase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(K2TrackerBase, _impl_.tracker_)
      + sizeof(K2TrackerBase::_impl_.tracker_)
      - PROTOBUF_FIELD_OFFSET(K2TrackerBase, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata K2TrackerBase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Amethyst_5fAPI_2eproto_getter, &descriptor_table_Amethyst_5fAPI_2eproto_once,
      file_level_metadata_Amethyst_5fAPI_2eproto[6]);
}

// ===================================================================

class K2Message::_Internal {
 public:
  using HasBits = decltype(std::declval<K2Message>()._impl_._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_messagetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_messagemanualtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_want_reply(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_message_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

K2Message::K2Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ktvr.K2Message)
}
K2Message::K2Message(const K2Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  K2Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trackerbasevector_){from._impl_.trackerbasevector_}
    , decltype(_impl_.trackerstatusesvector_){from._impl_.trackerstatusesvector_}
    , decltype(_impl_.message_string_){}
    , decltype(_impl_.messagetimestamp_){}
    , decltype(_impl_.messagemanualtimestamp_){}
    , decltype(_impl_.messagetype_){}
    , decltype(_impl_.tracker_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.want_reply_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message_string()) {
    _this->_impl_.message_string_.Set(from._internal_message_string(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.messagetimestamp_, &from._impl_.messagetimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.want_reply_) -
    reinterpret_cast<char*>(&_impl_.messagetimestamp_)) + sizeof(_impl_.want_reply_));
  // @@protoc_insertion_point(copy_constructor:ktvr.K2Message)
}

inline void K2Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trackerbasevector_){arena}
    , decltype(_impl_.trackerstatusesvector_){arena}
    , decltype(_impl_.message_string_){}
    , decltype(_impl_.messagetimestamp_){int64_t{0}}
    , decltype(_impl_.messagemanualtimestamp_){int64_t{0}}
    , decltype(_impl_.messagetype_){0}
    , decltype(_impl_.tracker_){0}
    , decltype(_impl_.state_){false}
    , decltype(_impl_.want_reply_){true}
  };
  _impl_.message_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

K2Message::~K2Message() {
  // @@protoc_insertion_point(destructor:ktvr.K2Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void K2Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trackerbasevector_.~RepeatedPtrField();
  _impl_.trackerstatusesvector_.~RepeatedPtrField();
  _impl_.message_string_.Destroy();
}

void K2Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void K2Message::Clear() {
// @@protoc_insertion_point(message_clear_start:ktvr.K2Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trackerbasevector_.Clear();
  _impl_.trackerstatusesvector_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.messagetimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.messagetimestamp_)) + sizeof(_impl_.state_));
    _impl_.want_reply_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* K2Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .ktvr.K2MessageType messageType = 1 [default = K2Message_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ktvr::K2MessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::ktvr::K2MessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required int64 messageTimestamp = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_messagetimestamp(&has_bits);
          _impl_.messagetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 messageManualTimestamp = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_messagemanualtimestamp(&has_bits);
          _impl_.messagemanualtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ktvr.K2TrackerBase trackerBaseVector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trackerbasevector(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ktvr.K2StatusPair trackerStatusesVector = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trackerstatusesvector(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .ktvr.ITrackerType tracker = 6 [default = Tracker_Handed];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ktvr::ITrackerType_IsValid(val))) {
            _internal_set_tracker(static_cast<::ktvr::ITrackerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bool state = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool want_reply = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_want_reply(&has_bits);
          _impl_.want_reply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string message_string = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_message_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ktvr.K2Message.message_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* K2Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ktvr.K2Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .ktvr.K2MessageType messageType = 1 [default = K2Message_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // required int64 messageTimestamp = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_messagetimestamp(), target);
  }

  // required int64 messageManualTimestamp = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_messagemanualtimestamp(), target);
  }

  // repeated .ktvr.K2TrackerBase trackerBaseVector = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trackerbasevector_size()); i < n; i++) {
    const auto& repfield = this->_internal_trackerbasevector(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ktvr.K2StatusPair trackerStatusesVector = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trackerstatusesvector_size()); i < n; i++) {
    const auto& repfield = this->_internal_trackerstatusesvector(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .ktvr.ITrackerType tracker = 6 [default = Tracker_Handed];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_tracker(), target);
  }

  // required bool state = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_state(), target);
  }

  // required bool want_reply = 8 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_want_reply(), target);
  }

  // required string message_string = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_string().data(), static_cast<int>(this->_internal_message_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ktvr.K2Message.message_string");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_message_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ktvr.K2Message)
  return target;
}

size_t K2Message::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ktvr.K2Message)
  size_t total_size = 0;

  if (_internal_has_message_string()) {
    // required string message_string = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_string());
  }

  if (_internal_has_messagetimestamp()) {
    // required int64 messageTimestamp = 2 [default = 0];
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_messagetimestamp());
  }

  if (_internal_has_messagemanualtimestamp()) {
    // required int64 messageManualTimestamp = 3 [default = 0];
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_messagemanualtimestamp());
  }

  if (_internal_has_messagetype()) {
    // required .ktvr.K2MessageType messageType = 1 [default = K2Message_Invalid];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  if (_internal_has_tracker()) {
    // required .ktvr.ITrackerType tracker = 6 [default = Tracker_Handed];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tracker());
  }

  if (_internal_has_state()) {
    // required bool state = 7 [default = false];
    total_size += 1 + 1;
  }

  if (_internal_has_want_reply()) {
    // required bool want_reply = 8 [default = true];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t K2Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ktvr.K2Message)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string message_string = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_string());

    // required int64 messageTimestamp = 2 [default = 0];
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_messagetimestamp());

    // required int64 messageManualTimestamp = 3 [default = 0];
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_messagemanualtimestamp());

    // required .ktvr.K2MessageType messageType = 1 [default = K2Message_Invalid];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());

    // required .ktvr.ITrackerType tracker = 6 [default = Tracker_Handed];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tracker());

    // required bool state = 7 [default = false];
    total_size += 1 + 1;

    // required bool want_reply = 8 [default = true];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ktvr.K2TrackerBase trackerBaseVector = 4;
  total_size += 1UL * this->_internal_trackerbasevector_size();
  for (const auto& msg : this->_impl_.trackerbasevector_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ktvr.K2StatusPair trackerStatusesVector = 5;
  total_size += 1UL * this->_internal_trackerstatusesvector_size();
  for (const auto& msg : this->_impl_.trackerstatusesvector_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData K2Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    K2Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*K2Message::GetClassData() const { return &_class_data_; }


void K2Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<K2Message*>(&to_msg);
  auto& from = static_cast<const K2Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ktvr.K2Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trackerbasevector_.MergeFrom(from._impl_.trackerbasevector_);
  _this->_impl_.trackerstatusesvector_.MergeFrom(from._impl_.trackerstatusesvector_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message_string(from._internal_message_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.messagetimestamp_ = from._impl_.messagetimestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.messagemanualtimestamp_ = from._impl_.messagemanualtimestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.messagetype_ = from._impl_.messagetype_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tracker_ = from._impl_.tracker_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.want_reply_ = from._impl_.want_reply_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void K2Message::CopyFrom(const K2Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ktvr.K2Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool K2Message::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.trackerbasevector_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.trackerstatusesvector_))
    return false;
  return true;
}

void K2Message::InternalSwap(K2Message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.trackerbasevector_.InternalSwap(&other->_impl_.trackerbasevector_);
  _impl_.trackerstatusesvector_.InternalSwap(&other->_impl_.trackerstatusesvector_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_string_, lhs_arena,
      &other->_impl_.message_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(K2Message, _impl_.state_)
      + sizeof(K2Message::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(K2Message, _impl_.messagetimestamp_)>(
          reinterpret_cast<char*>(&_impl_.messagetimestamp_),
          reinterpret_cast<char*>(&other->_impl_.messagetimestamp_));
  swap(_impl_.want_reply_, other->_impl_.want_reply_);
}

::PROTOBUF_NAMESPACE_ID::Metadata K2Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Amethyst_5fAPI_2eproto_getter, &descriptor_table_Amethyst_5fAPI_2eproto_once,
      file_level_metadata_Amethyst_5fAPI_2eproto[7]);
}

// ===================================================================

class K2ResponseMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<K2ResponseMessage>()._impl_._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_messagetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_messagemanualtimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

K2ResponseMessage::K2ResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ktvr.K2ResponseMessage)
}
K2ResponseMessage::K2ResponseMessage(const K2ResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  K2ResponseMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagetimestamp_){}
    , decltype(_impl_.messagetype_){}
    , decltype(_impl_.tracker_){}
    , decltype(_impl_.messagemanualtimestamp_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.messagetimestamp_, &from._impl_.messagetimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.messagetimestamp_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:ktvr.K2ResponseMessage)
}

inline void K2ResponseMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messagetimestamp_){int64_t{0}}
    , decltype(_impl_.messagetype_){0}
    , decltype(_impl_.tracker_){0}
    , decltype(_impl_.messagemanualtimestamp_){int64_t{0}}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.result_){1}
  };
}

K2ResponseMessage::~K2ResponseMessage() {
  // @@protoc_insertion_point(destructor:ktvr.K2ResponseMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void K2ResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void K2ResponseMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void K2ResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ktvr.K2ResponseMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.messagetimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.success_) -
        reinterpret_cast<char*>(&_impl_.messagetimestamp_)) + sizeof(_impl_.success_));
    _impl_.result_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* K2ResponseMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .ktvr.K2ResponseMessageType messageType = 1 [default = K2ResponseMessage_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ktvr::K2ResponseMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::ktvr::K2ResponseMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required int64 messageTimestamp = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_messagetimestamp(&has_bits);
          _impl_.messagetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 messageManualTimestamp = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_messagemanualtimestamp(&has_bits);
          _impl_.messagemanualtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .ktvr.ITrackerType tracker = 4 [default = Tracker_Handed];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ktvr::ITrackerType_IsValid(val))) {
            _internal_set_tracker(static_cast<::ktvr::ITrackerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .ktvr.K2ResponseMessageCode result = 5 [default = K2ResponseMessageCode_UnknownError];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ktvr::K2ResponseMessageCode_IsValid(val))) {
            _internal_set_result(static_cast<::ktvr::K2ResponseMessageCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bool success = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* K2ResponseMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ktvr.K2ResponseMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .ktvr.K2ResponseMessageType messageType = 1 [default = K2ResponseMessage_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // required int64 messageTimestamp = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_messagetimestamp(), target);
  }

  // required int64 messageManualTimestamp = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_messagemanualtimestamp(), target);
  }

  // required .ktvr.ITrackerType tracker = 4 [default = Tracker_Handed];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_tracker(), target);
  }

  // required .ktvr.K2ResponseMessageCode result = 5 [default = K2ResponseMessageCode_UnknownError];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_result(), target);
  }

  // required bool success = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ktvr.K2ResponseMessage)
  return target;
}

size_t K2ResponseMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ktvr.K2ResponseMessage)
  size_t total_size = 0;

  if (_internal_has_messagetimestamp()) {
    // required int64 messageTimestamp = 2 [default = 0];
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_messagetimestamp());
  }

  if (_internal_has_messagetype()) {
    // required .ktvr.K2ResponseMessageType messageType = 1 [default = K2ResponseMessage_Invalid];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  if (_internal_has_tracker()) {
    // required .ktvr.ITrackerType tracker = 4 [default = Tracker_Handed];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tracker());
  }

  if (_internal_has_messagemanualtimestamp()) {
    // required int64 messageManualTimestamp = 3 [default = 0];
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_messagemanualtimestamp());
  }

  if (_internal_has_success()) {
    // required bool success = 6 [default = false];
    total_size += 1 + 1;
  }

  if (_internal_has_result()) {
    // required .ktvr.K2ResponseMessageCode result = 5 [default = K2ResponseMessageCode_UnknownError];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return total_size;
}
size_t K2ResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ktvr.K2ResponseMessage)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int64 messageTimestamp = 2 [default = 0];
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_messagetimestamp());

    // required .ktvr.K2ResponseMessageType messageType = 1 [default = K2ResponseMessage_Invalid];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());

    // required .ktvr.ITrackerType tracker = 4 [default = Tracker_Handed];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tracker());

    // required int64 messageManualTimestamp = 3 [default = 0];
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_messagemanualtimestamp());

    // required bool success = 6 [default = false];
    total_size += 1 + 1;

    // required .ktvr.K2ResponseMessageCode result = 5 [default = K2ResponseMessageCode_UnknownError];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData K2ResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    K2ResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*K2ResponseMessage::GetClassData() const { return &_class_data_; }


void K2ResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<K2ResponseMessage*>(&to_msg);
  auto& from = static_cast<const K2ResponseMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ktvr.K2ResponseMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.messagetimestamp_ = from._impl_.messagetimestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.messagetype_ = from._impl_.messagetype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tracker_ = from._impl_.tracker_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.messagemanualtimestamp_ = from._impl_.messagemanualtimestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.success_ = from._impl_.success_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void K2ResponseMessage::CopyFrom(const K2ResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ktvr.K2ResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool K2ResponseMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void K2ResponseMessage::InternalSwap(K2ResponseMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(K2ResponseMessage, _impl_.success_)
      + sizeof(K2ResponseMessage::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(K2ResponseMessage, _impl_.messagetimestamp_)>(
          reinterpret_cast<char*>(&_impl_.messagetimestamp_),
          reinterpret_cast<char*>(&other->_impl_.messagetimestamp_));
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata K2ResponseMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Amethyst_5fAPI_2eproto_getter, &descriptor_table_Amethyst_5fAPI_2eproto_once,
      file_level_metadata_Amethyst_5fAPI_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ktvr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ktvr::K2Quaternion*
Arena::CreateMaybeMessage< ::ktvr::K2Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ktvr::K2Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::ktvr::K2Vector3*
Arena::CreateMaybeMessage< ::ktvr::K2Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ktvr::K2Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::ktvr::K2TrackerPhysics*
Arena::CreateMaybeMessage< ::ktvr::K2TrackerPhysics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ktvr::K2TrackerPhysics >(arena);
}
template<> PROTOBUF_NOINLINE ::ktvr::K2TrackerPose*
Arena::CreateMaybeMessage< ::ktvr::K2TrackerPose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ktvr::K2TrackerPose >(arena);
}
template<> PROTOBUF_NOINLINE ::ktvr::K2StatusPair*
Arena::CreateMaybeMessage< ::ktvr::K2StatusPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ktvr::K2StatusPair >(arena);
}
template<> PROTOBUF_NOINLINE ::ktvr::K2TrackerData*
Arena::CreateMaybeMessage< ::ktvr::K2TrackerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ktvr::K2TrackerData >(arena);
}
template<> PROTOBUF_NOINLINE ::ktvr::K2TrackerBase*
Arena::CreateMaybeMessage< ::ktvr::K2TrackerBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ktvr::K2TrackerBase >(arena);
}
template<> PROTOBUF_NOINLINE ::ktvr::K2Message*
Arena::CreateMaybeMessage< ::ktvr::K2Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ktvr::K2Message >(arena);
}
template<> PROTOBUF_NOINLINE ::ktvr::K2ResponseMessage*
Arena::CreateMaybeMessage< ::ktvr::K2ResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ktvr::K2ResponseMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
